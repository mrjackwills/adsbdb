version: "3.9"
networks:
  dev-adsbdb-net:
    name: dev-adsbdb-net
services:
  adsbdb_postgres:
    image: adsbdb_postgres:0.0.10
    container_name: adsbdb_postgres
    build:
      context: .
      dockerfile: /workspaces/adsbdb/docker/dockerfile/dev.postgres.Dockerfile
      args:
        - DOCKER_UID=${DOCKER_UID}
        - DOCKER_GUID=${DOCKER_GUID}
        - DOCKER_TIME_CONT=${DOCKER_TIME_CONT}
        - DOCKER_TIME_CITY=${DOCKER_TIME_CITY}
    env_file: /workspaces/adsbdb/docker/env/.postgres.env
    cap_drop:
      - all
    security_opt:
      - no-new-privileges
    ipc: private
    restart: always
    shm_size: 256MB
    volumes:
      - /workspaces/adsbdb/db_data/pg_data:/pg_data
    command: -p 5433
    ports:
      - 127.0.0.1:5433:5433
    networks:
      - dev-adsbdb-net
    logging:
      driver: "json-file"
      options:
        max-size: "16m"
    healthcheck:
      test: ["CMD", "/healthcheck/health_postgres.sh"]
      start_period: 2m
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M

  adsbdb_redis:
    image: adsbdb_redis:0.0.10
    container_name: adsbdb_redis
    hostname: adsbdb_redis
    build:
      context: .
      dockerfile: /workspaces/adsbdb/docker/dockerfile/redis.Dockerfile
      args:
        - DOCKER_UID=${DOCKER_UID}
        - DOCKER_GUID=${DOCKER_GUID}
        - DOCKER_TIME_CONT=${DOCKER_TIME_CONT}
        - DOCKER_TIME_CITY=${DOCKER_TIME_CITY}
    env_file: /workspaces/adsbdb/docker/env/.redis.env
    volumes:
      - /workspaces/adsbdb/db_data/redis_data:/redis_data
    cap_drop:
      - all
    security_opt:
      - no-new-privileges
    ipc: private
    restart: always
    ports:
      - 127.0.0.1:6380:6380
    networks:
      - dev-adsbdb-net
    logging:
      driver: "json-file"
      options:
        max-size: "16m"
    healthcheck:
      test: ["CMD", "/healthcheck/health_redis.sh"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 32MB
  adsbdb_postgres_backup:
    image: adsbdb_postgres_backup:0.0.10
    container_name: adsbdb_postgres_backup
    build:
      context: .
      dockerfile: /workspaces/adsbdb/docker/dockerfile/dev.postgres_backup.Dockerfile
      args:
        - DOCKER_UID=${DOCKER_UID}
        - DOCKER_GUID=${DOCKER_GUID}
        - DOCKER_TIME_CONT=${DOCKER_TIME_CONT}
        - DOCKER_TIME_CITY=${DOCKER_TIME_CITY}
    env_file: /workspaces/adsbdb/docker/env/.postgres_backup.env
    cap_drop:
      - all
    security_opt:
      - no-new-privileges
    ipc: private
    volumes:
      - /workspaces/adsbdb/db_data/backups:/backups
      - /workspaces/adsbdb/db_data/redis_data:/redis_data:ro
      - $HOME/adsbdb/logs:/logs:ro
    networks:
      - dev-adsbdb-net
    logging:
      driver: "json-file"
      options:
        max-size: "16m"
    depends_on:
      adsbdb_postgres:
        condition: service_healthy
    restart: 'no'
    deploy:
      resources:
        limits:
          memory: 32M
  adsbdb_api:
    image: adsbdb_api:0.0.10
    container_name: adsbdb_api
    hostname: adsbdb_api
    build:
      context: /workspaces/adsbdb/
      dockerfile: /workspaces/adsbdb/docker/dockerfile/api.Dockerfile
      args:
        - DOCKER_UID=${DOCKER_UID}
        - DOCKER_GUID=${DOCKER_GUID}
        - DOCKER_TIME_CONT=${DOCKER_TIME_CONT}
        - DOCKER_TIME_CITY=${DOCKER_TIME_CITY}
    env_file: /workspaces/adsbdb/docker/env/.api.env
    volumes:
      - $HOME/adsbdb/logs/api:/logs
    ports:
      - "127.0.0.1:8100:8100"
    cap_drop:
      - all
    security_opt:
      - no-new-privileges
    ipc: private
    restart: always
    networks:
      - dev-adsbdb-net
    logging:
      driver: "json-file"
      options:
        max-size: "16m"
    deploy:
      resources:
        limits:
          memory: 64M
    healthcheck:
      test: ["CMD", "/healthcheck/health_api.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      adsbdb_postgres:
        condition: service_healthy
      adsbdb_redis:
        condition: service_healthy

